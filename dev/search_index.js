var documenterSearchIndex = {"docs":
[{"location":"examples/ex_basics/#Basic-Example","page":"TBD","title":"Basic Example","text":"","category":"section"},{"location":"examples/ex_basics/","page":"TBD","title":"TBD","text":"...","category":"page"},{"location":"refs/api/#API","page":"API","title":"API","text":"","category":"section"},{"location":"refs/api/#Index","page":"API","title":"Index","text":"","category":"section"},{"location":"refs/api/","page":"API","title":"API","text":"Pages   = [\"api.md\"]\nOrder   = [:function, :type]","category":"page"},{"location":"refs/api/#References","page":"API","title":"References","text":"","category":"section"},{"location":"refs/api/","page":"API","title":"API","text":"Modules = [MPITape]\nPages   = [\"api.jl\", \"printing.jl\", \"fileio.jl\"]","category":"page"},{"location":"refs/api/#MPITape.print_merged-Tuple{Any}","page":"API","title":"MPITape.print_merged","text":"print_merged(tape; color)\n\n\nPrints the given tape with the assumption that it contains events from multiple MPI ranks. Typically, the input should be the result of MPITape.merge(), MPITape.readall_and_merge(), or similar.\n\n\n\n\n\n","category":"method"},{"location":"refs/api/#MPITape.print_mytape-Tuple{}","page":"API","title":"MPITape.print_mytape","text":"print_mytape(; showrank)\n\n\nPrint the local tape (of the calling MPI rank).\n\n\n\n\n\n","category":"method"},{"location":"refs/api/#MPITape.merge-Tuple{}","page":"API","title":"MPITape.merge","text":"To be called on all MPI ranks. Saves all tapes to disk and then reads and merges them on the master (rank 0). Returns the merged tape on the master and nothing on all other ranks.\n\n\n\n\n\n","category":"method"},{"location":"refs/api/#MPITape.readall_and_merge","page":"API","title":"MPITape.readall_and_merge","text":"readall_and_merge()\nreadall_and_merge(dir; prefix)\n\n\nReads all tapes from disk and merges them into a single \"merged tape\".\n\n\n\n\n\n","category":"function"},{"location":"#MPITape.jl","page":"MPITape","title":"MPITape.jl","text":"","category":"section"},{"location":"#Installation","page":"MPITape","title":"Installation","text":"","category":"section"},{"location":"","page":"MPITape","title":"MPITape","text":"Note: Only Linux is supported!","category":"page"},{"location":"","page":"MPITape","title":"MPITape","text":"The package is not registered. You can use","category":"page"},{"location":"","page":"MPITape","title":"MPITape","text":"] add https://github.com/pc2/MPITape.jl","category":"page"},{"location":"","page":"MPITape","title":"MPITape","text":"to add the package to your Julia environment.","category":"page"},{"location":"#Prerequisites","page":"MPITape","title":"Prerequisites","text":"","category":"section"},{"location":"","page":"MPITape","title":"MPITape","text":"TBD","category":"page"},{"location":"#Noteworthy-Alternatives","page":"MPITape","title":"Noteworthy Alternatives","text":"","category":"section"},{"location":"","page":"MPITape","title":"MPITape","text":"TBD","category":"page"},{"location":"#Acknowledgements","page":"MPITape","title":"Acknowledgements","text":"","category":"section"},{"location":"","page":"MPITape","title":"MPITape","text":"CI infrastructure is provided by the Paderborn Center for Parallel Computing (PCÂ²)","category":"page"}]
}
